
Comprehensive Git and GitHub Learning Guide
===========================================

PART 1: Introduction to Git and GitHub
--------------------------------------
- Git: A distributed version control system to track changes in source code.
- GitHub: A cloud-based hosting platform for Git repositories.

Benefits:
- Track code changes over time.
- Collaborate with others.
- Manage open-source or private projects.

PART 2: Installing Git
----------------------
Download: https://git-scm.com/downloads
Install and use Git Bash (on Windows) or Terminal (on macOS/Linux).

Configure Git (one-time setup):
    git config --global user.name "Your Name"
    git config --global user.email "you@example.com"

Check setup:
    git --version

PART 3: Basic Git Commands
--------------------------
Start a repository:
    git init

Check status:
    git status

Add files:
    git add filename         # Add specific file
    git add .                # Add all files

Commit changes:
    git commit -m "Message"

View commit history:
    git log

PART 4: Working with GitHub
---------------------------
Create a repository on https://github.com

Connect local repo to GitHub:
    git remote add origin https://github.com/username/repo-name.git
    git branch -M main
    git push -u origin main

Clone a repository:
    git clone https://github.com/username/repo-name.git

Pull latest changes:
    git pull

Push local changes:
    git push

PART 5: Branching and Merging
-----------------------------
Create a new branch:
    git checkout -b new-feature

Switch branches:
    git checkout main

Merge a branch:
    git checkout main
    git merge new-feature

Delete a branch:
    git branch -d new-feature

PART 6: Resolving Conflicts
---------------------------
- Git will alert you to conflicts after a merge.
- Open conflicted files and manually resolve.
- After resolving:
    git add .
    git commit -m "Resolved conflict"

PART 7: .gitignore and README.md
-------------------------------
Create a .gitignore to exclude files:
Example:
    __pycache__/
    *.log
    *.pyc

Create a README.md for project documentation.

PART 8: Collaborating on GitHub
-------------------------------
- Fork a repo
- Clone the forked repo
- Create a new branch for your changes
- Push changes and create a pull request (PR)

PART 9: GitHub Features to Learn
--------------------------------
- GitHub Issues (bug tracking, task management)
- GitHub Projects (Kanban boards)
- GitHub Actions (CI/CD)
- GitHub Pages (host static websites)
- Wiki (project documentation)

PART 10: Best Practices
-----------------------
- Commit often with clear messages.
- Use branches for features/fixes.
- Always pull before pushing.
- Write descriptive pull requests.
- Use tags/releases for versioning.

PART 11: Useful Resources
-------------------------
- Git official docs: https://git-scm.com/doc
- GitHub Docs: https://docs.github.com
- Git Handbook: https://guides.github.com/introduction/git-handbook/
- Try Git (interactive): https://try.github.io
- Pro Git Book (free): https://git-scm.com/book/en/v2

